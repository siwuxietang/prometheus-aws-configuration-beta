#cloud-config
users:
  - name: prometheus
    system: true

package_update: true
package_upgrade: true
packages: ['chrony', 'nginx', 'awscli']

mounts:
  - [ /dev/xvdh1, /mnt, auto]

write_files:
  - content: |
      global:
        scrape_interval: 30s
      alerting:
        alertmanagers:
          - static_configs:
            - targets: ['10.0.0.38:9093']
      rule_files:
        - "/etc/prometheus/alerts/*"
      scrape_configs:
        - job_name: prometheus
          scrape_interval: 5s
          static_configs:
            - targets: ['localhost:9090']
        - job_name: paas-targets
          scheme: http
          proxy_url: 'http://localhost:8080'
          file_sd_configs:
            - files: ['/etc/prometheus/targets/*.json']
              refresh_interval: 30s
        - job_name: 'HTTP-blackbox-check'
          metrics_path: /probe
          params:
            module: [http_2xx]
          static_configs:
            - targets:
              - https://www.unixdaemon.net
              - https://dropwizard-example.cloudapps.digital
              - https://mysql-exporter-paas.cloudapps.digital
              - https://http-simulator.cloudapps.digital/metrics
              - https://alerter.cloudapps.digital/
          relabel_configs:
            - source_labels: [__address__]
              target_label: __param_target
            - source_labels: [__param_target]
              target_label: instance
            - target_label: __address__
              replacement: 127.0.0.1:9115
    owner: root:root
    path: /etc/prometheus/prometheus.yml
    permissions: 0644
  - content: |
      groups:
      - name: HTTP-SVC-BASE-CHECKS
        rules:
        - alert: RequestsReponseTimeBelow
          expr: probe_duration_seconds{job="HTTP-blackbox-check"} > 2
          for: 1m
          labels:
            severity: "P3"
          annotations:
            summary: "Service is taking longer than 2 seconds to respond"
            description: "The service name is {{ $labels.job }}. The URL under test is {{ $labels.instance }}"
           #receivers:

        - alert: HTTPAvailabilityCheck
          expr: probe_success != 1
          for: 30s
          labels:
            severity: "P1"
          annotations:
            summary: "Service is not available at endpoint"
            description: "The service name {{ $labels.job }} is no longer reachable from external. The following URL is no longer reachable {{ $labels.instance }}"
          #receivers:

        - alert: 4xxAboveAcceptableThreshold
          expr: http_requests_total{status=~"4.."} >= 10
          for: 3m
          labels:
            severity: "P2"
          annotations:
            summary: "The number of 4xx http status codes"
            description: "The service {{ $labels.job }} on instance {{ $labels.instance }} is experiencing a high number of HTTP 400's error codes . The code displayed is {{ $labels.code }}"
          #receivers:

        - alert: 5xxDetected
          expr: rate(http_requests_total{job="http-simulator", status=~"5.."}[1m]) >= 1
          for: 2m
          labels:
            severity: "P1"
          annotations:
            summary: "The number of 5xx http status codes"
            description: "The service {{ $labels.job }} on instance {{ $labels.instance }} is experiencing a high number of HTTP 500's error codes . The HTTP status code is  {{ $labels.status }}"
          #receivers:


      - name: HTTP-SVC-SSL-CHECKS
        rules:
        ## SSL certificates issue
        - alert: SSLCertificatesExpiringIn14Days
          expr: timestamp(probe_ssl_earliest_cert_expiry) < 1209600
          for: 1h
          labels:
            severity: "P3"
            risk: "Disruption"
          annotations:
            summary: "SSL certificate expiring in 14 Days"
            description: "The service {{ $labels.job }} has SSL certificates expiring in 14 days. The URL that the certificate belongs to is {{ $labels.instance }}"
          #receivers:


        - alert: SSLCertificatesExpiringIn7Days
          expr: timestamp(probe_ssl_earliest_cert_expiry) < 604800
          for: 1h
          labels:
            severity: "P3"
            risk: "Disruption"
          annotations:
            summary: "SSL certificate expiring in 7 Days"
            description: "The service {{ $labels.job }} has SSL certificates expiring in 7 days. The URL that the certificate belongs to is {{ $labels.instance }}"
          #receivers:


        - alert: SSLCertificatesExpiringIn3Days
          expr: timestamp(probe_ssl_earliest_cert_expiry) < 302400
          for: 1h
          labels:
            severity: "P3"
            risk: "Disruption"
          annotations:
            summary: "SSL certificate expiring in 3 Days"
            description: "The service {{ $labels.job }} has SSL certificates expiring in 3 days. The URL that the certificate belongs to is {{ $labels.instance }}"
          #receivers:
    owner: root:root
    path: /etc/prometheus/alerts/alerts.default
    permissions: 0644
  - content: |
      [Unit]
      Description=Prometheus

      [Service]
      User=prometheus
      ExecStart=/opt/prometheus/prometheus --config.file="/etc/prometheus/prometheus.yml" --storage.tsdb.path="/mnt/prometheus" --log.level=debug
      WorkingDirectory=/opt/prometheus
      Restart=on-failure
      RestartSec=5

      [Install]
      WantedBy = multi-user.target
    owner: root:root
    path: /etc/systemd/system/prometheus.service
    permissions: 0644
  - content: |
      [Unit]
      Description=Blackbox

      [Service]
      User=prometheus
      ExecStart=/opt/blackbox/blackbox_exporter --config.file="/etc/prometheus/blackbox.yml" --log.level=debug
      WorkingDirectory=/opt/blackbox

      [Install]
      WantedBy = multi-user.target
    owner: root:root
    path: /etc/systemd/system/blackbox.service
    permissions: 0644
  - content: |
      server {
        listen 80 default_server;
        server_name ${domain_name};
        auth_basic "Prometheus";
        auth_basic_user_file /etc/nginx/.htpasswd;

        location / {
          proxy_pass  http://localhost:9090;
        }
        location /status {
          auth_basic off;
          proxy_pass http://localhost:9090/status;
        }
      }
      server {
        listen 8080;
        resolver 10.0.0.2;

        location / {
          proxy_pass https://$host$uri;
          proxy_ssl_server_name on;
          proxy_set_header X-CF-APP-INSTANCE $arg_cf_app_guid:$arg_cf_app_instance_index;
          proxy_set_header Authorization "Bearer $arg_cf_app_guid";
        }
      }
    owner: root:root
    path: /etc/nginx/sites-available/default
    permissions: 0644
  - owner: root:root
    path: /etc/cron.d/sync_prometheus_config_s3
    content: |
      PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
      */5 * * * * root aws s3 sync --delete s3://${config_bucket}/active /etc/prometheus/targets
  - owner: root:root
    path: /etc/cron.d/lets_encrypt_renewal
    content: |
      PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
      * 7,19 * * * root certbot renew --post-hook 'service nginx reload'
  - owner: root:root
    path: /etc/nginx/.htpasswd
    permissions: 0444
    content: "grafana:$apr1$LDmrTU1C$i1TWO7EiXgmVVOm3xkdpr0"
  - owner: root:root
    path: /etc/filebeat/filebeat.yml
    permissions: 0444
    content: |
      filebeat.prospectors:
      - type: log
        enabled: true
        paths:
          - /var/log/nginx/*.log
        fields:
          type: nginx-access
        fields_under_root: true
        encoding: utf-8
        exclude_files: [".gz"]
        ignore_older: 3h

      output.logstash:
        hosts: ["${logstash_endpoint}:${logstash_port}"]
        loadbalance: true
        ssl.enabled: true
runcmd:
  - [ whoami ]
  - [ deluser, ubuntu ]
  - [ service, sshd, restart ]
  - [ bash, -c, "echo 'server 169.254.169.123 prefer iburst' >> /etc/chrony/chrony.conf" ] # Configure Amazon Time Sync
  - [ git, clone, "https://github.com/alphagov/re-prometheus-cm.git" ]
  - [ bash, /re-prometheus-cm/install_puppet_5_agent.sh ]
  - [ sudo, -E, /opt/puppetlabs/bin/puppet, apply, /re-prometheus-cm/manifests/, --hiera_config=/re-prometheus-cm/hiera.yaml ]
  - [ service, chrony, restart ]
  - [ mkdir, /opt/prometheus ]
  - [ mkdir, /opt/blackbox ]
  - [ mkdir, /etc/prometheus/targets ] # Prometheus target configurations
  - [ wget, -q, "https://github.com/prometheus/prometheus/releases/download/v${prometheus_version}/prometheus-${prometheus_version}.linux-amd64.tar.gz", -P, /tmp ]
  - [ tar, xzvf, /tmp/prometheus-${prometheus_version}.linux-amd64.tar.gz, --strip-components=1, -C, /opt/prometheus ]
  - [ wget, -q, "https://github.com/prometheus/blackbox_exporter/releases/download/v0.12.0/blackbox_exporter-0.12.0.linux-amd64.tar.gz", -P, /tmp ]
  - [ tar, xzvf, /tmp/blackbox_exporter-0.12.0.linux-amd64.tar.gz, --strip-components=1, -C, /opt/blackbox ]
  - [ mkdir, -p, /mnt/prometheus ]
  - [ chown, -R, "prometheus:prometheus", /mnt/prometheus]
  - [ chown, -R, "prometheus:prometheus", /opt/prometheus ]
  - [ chown, -R, "prometheus:prometheus", /opt/blackbox ]
  - [ cp, /opt/blackbox/blackbox.yml, /etc/prometheus/blackbox.yml]
  - [ systemctl, enable, --now, prometheus.service ]
  - [ systemctl, enable, --now, blackbox.service ]
  - [ add-apt-repository, "ppa:certbot/certbot", -y ]
  - [ bash, -c, "echo 'deb https://artifacts.elastic.co/packages/6.x/apt stable main' >> /etc/apt/sources.list.d/elastic-6.x.list" ]
  - [ bash, -c, "wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | apt-key add -" ]
  - [ apt-get, update ]
  - 'apt-get install -o Dpkg::Options::="--force-confold" filebeat python-certbot-nginx -y'
  - [ certbot, ${real_certificate == "yes" ? "" : "--staging"}, -d, ${domain_name}, -m, ${lets_encrypt_email}, --authenticator, standalone, --installer, nginx, --pre-hook, "nginx -s stop", --post-hook, "nginx", --agree-tos, -n, --redirect ]
  - [ systemctl, enable, filebeat ]
  - [ reboot ]
